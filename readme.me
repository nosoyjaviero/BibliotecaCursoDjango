Creamos la configuracion de base de datos dentro de settings
Creamos la base de datos en psotgree. Para eso:

EJECUTAMOS  SQLSHELL 
Server [localhost]: DEJAR VACIO 
Database [postgres]:DEJAR VACIO 
Port [5432]: DEJAR VACIO 
Username [postgres]: DEJAR VACIO 
Password for user postgres: 123
psql (15.1)
WARNING: Console code page (850) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# CREATE DATABASE dbempleado;
CREATE DATABASE
postgres=# CREATE USER neunapp;
CREATE ROLE
postgres=# \C dbempleado;
Title is "dbempleado".
postgres=# \c dbempleado;
You are now connected to database "dbempleado" as user "postgres".
dbempleado=# ALTER ROLE neunapp WITH PASSWORD '123'
dbempleado-# ;
ALTER ROLE
dbempleado=#


ahora debemos instalar 
pip install psycopg2 

esto para que el codigo python se transforme en codigo sql de postgress

ejecutar las migraciones 
 py manage.py migrate

finalmente ejecutamos el comando 
py manage.py createsuperuser

Creamos las applicationes

con django-admin startapp libro
                         lector
                         autor
Creamos los modelos 

Instalar pillow 
pip install pillow

configurar el name de cada ModelConfig 

ejecutar 
py manage.py  makemigrations
py manage.py  migrate 

crear el archivos urls.py dentro cada proyecto
agregar su codigo correspondiente
asignar las rutas de nuestros projectos a urls 

Llamar a admin cada modelo

Creamos la ruta 
Luego creamos la vista
y luego creamos el template en su correspondiente carpeta en dentro de templates
finalmente añadimos el codigo al html, mostrando el objeto

Esto funciona, pero no es lo adecuado.
Para eso... Vamos a crear un archivo managers.py donde solo podremos llamar exclusivamente a nuestro modelo

La principal diferencia entre "return Autor.objects.all()" y "return self.all()" es que el primero devuelve todos los objetos del modelo "Autor" utilizando el Manager predeterminado de Django para ese modelo, mientras que el segundo utiliza un Manager personalizado llamado "AutorManager" definido en la clase "AutorManager".

Cuando se utiliza "return Autor.objects.all()", se está utilizando el Manager predeterminado de Django para el modelo "Autor". Este Manager predeterminado tiene una serie de métodos útiles, como "all()", que devuelve una lista de todos los objetos del modelo. En este caso, "Autor.objects.all()" devolvería una lista de todos los objetos del modelo "Autor".

Por otro lado, cuando se utiliza "return self.all()", se está utilizando un Manager personalizado llamado "AutorManager" que ha sido definido en la clase "AutorManager". Este Manager personalizado también tiene un método "all()" que devuelve una lista de todos los objetos del modelo, pero ha sido definido específicamente para añadir funcionalidades adicionales o personalizar el comportamiento del modelo "Autor".

En resumen, "return Autor.objects.all()" utiliza el Manager predeterminado de Django para el modelo "Autor", mientras que "return self.all()" utiliza un Manager personalizado definido en la clase "AutorManager" que puede tener funcionalidades adicionales o personalizadas.

Esta funcion sirve para buscar en el search tambien en apellido, el or en base de datos usando python debe llevar la Q para que la base de datos detecte la consulta

Al alterar los modelos hay que 
py manage.py makemigrations
py manage.py migrate

No se haran pruebas esta vez en el navegador, utilizaremos la terminal y llamaremos a la shell de python

py manage.py shell
from apps.libro.models import * 
Categoria.objects.categoria_por_autor('1'). 

Nota: Devuelve 
>>> from apps.libro.models import *         
>>> Categoria.objects.categoria_por_autor('1') 


<QuerySet [<Categoria: 4 Ciencia>, <Categoria: 4 Ciencia>]>
>>> Categoria.objects.categoria_por_autor('2') 
<QuerySet [<Categoria: 6 Romance>, <Categoria: 6 Romance>, <Categoria: 6 Romance>]>
>>>

Notaras que se repitieron varia veces la misma respuesta.

Para esto utilizamos el .distinct()
para eliminar duplicados.

Volvemos a ejecutar el shell y probamos
Notaras que ya no se repite

ejecutar el shell y probamos
from apps.libro.models import *         
Libro.objects.add_autor_libro('5','3') 

Un detailview podria hacer un metodo post?
No puede. 
Pero, si se puede ayudar a que lo ejecute y para hacer eso lo hacems con un Mixin


ejecutar el shell y probamos
from apps.libro.models import *         
Libro.objects.numeros_De_Libros_Prestados() 
>>> {'num_libros': 10}
A diferencia del Annotate este devuelve un diccionario

from apps.libro.models import *
Categoria.objects.listar_cantidad_de_libros_categoria()

ejecutar el shell y probamos
from apps.lector.models import *   
Prestamo.objects.promedio_de_edad_en_libro()
{'promedio_edad': 29.666666666666668, 'suma_edades': 89}

Podemos observar que le agregamos un nuevo valor al diccionario que es 'suma_edades': 89