En Django, related_name es un parámetro que se utiliza al definir un campo de relación en un modelo. Este parámetro permite especificar el nombre del atributo que se utilizará para acceder a la relación inversa desde el modelo relacionado.

Por defecto, Django genera un nombre para la relación inversa utilizando el nombre del modelo que contiene la relación y la palabra clave "set". Por ejemplo, si tenemos un modelo Libro con un campo de relación a Categoria, la relación inversa se llamaría libro_set.

Sin embargo, podemos usar el parámetro related_name para cambiar este nombre a algo más significativo o legible. Por ejemplo, si queremos acceder a los libros de una categoría a través de un atributo llamado libros, podemos definir el campo de relación así:


class Categoria(models.Model):
    nombre = models.CharField(max_length=100)

class Libro(models.Model):
    titulo = models.CharField(max_length=200)
    categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE, related_name='libros')
    
Aquí, el parámetro related_name se establece en 'libros', lo que significa que podemos acceder a los libros de una categoría así:

categoria = Categoria.objects.get(nombre='Ficción')
libros_de_ficcion = categoria.libros.all()
En resumen, related_name nos permite personalizar el nombre del atributo de relación inversa para hacer que el código sea más legible y expresivo.

Managers 12.4 .distinct() para eliminar resultados duplicados.

El método .distinct() en Python Django se utiliza en una consulta de base de datos para eliminar duplicados de los resultados de la consulta.
Por ejemplo, si tenemos una tabla "Personas" con varias columnas, y realizamos una consulta que devuelve varias filas, algunas de las cuales tienen el mismo valor en una determinada columna, podemos usar .distinct() para eliminar las filas duplicadas basándonos en esa columna específica.

Aquí hay un ejemplo:

# Importamos el modelo "Persona"
from miapp.models import Persona

# Realizamos una consulta que devuelve todas las personas con el apellido "García"
personas = Persona.objects.filter(apellido='García')

# Agregamos .distinct() para eliminar las personas duplicadas en la consulta.
personas_sin_duplicados = personas.distinct()
En este ejemplo, si hay varias personas en la base de datos con el mismo apellido "García", .distinct() asegurará que solo se devuelva una vez cada una de esas personas.


Managers 14. Annotate. Cantidad de Libros de que tiene cada una categoria.

    Aquí te presento un ejemplo de cómo usar annotate en Django:

Supongamos que tenemos un modelo Libro con un campo categoria, y queremos obtener la cantidad de libros por categoría. Podemos usar annotate de la siguiente manera:


from django.db import models

class Libro(models.Model):
    titulo = models.CharField(max_length=100)
    autor = models.CharField(max_length=50)
    categoria = models.CharField(max_length=50)

# Obtener la cantidad de libros por categoría
libros_por_categoria = Libro.objects.values('categoria').annotate(num_libros=models.Count('id'))


En este ejemplo, usamos values para especificar que queremos agrupar los libros por la categoría y annotate para agregar una columna calculada num_libros que cuenta el número de libros en cada categoría. La consulta resultante nos devuelve una lista de diccionarios que incluye la categoría y la cantidad de libros en esa categoría.

Managers 15
from django.db import models

class Libro(models.Model):
    titulo = models.CharField(max_length=100)
    autor = models.CharField(max_length=50)
    anio_publicacion = models.IntegerField()
    prestado = models.BooleanField(default=False)
    
    def numeros_de_libros_prestados(self):
        # Utilizamos el método "aggregate" para realizar una consulta que cuenta la cantidad de libros prestados.
        # El resultado se almacena en la variable "resultados", que contiene un objeto con un campo "num_libros" que tiene la cantidad de libros prestados.
        resultados = Libro.objects.aggregate(num_libros_prestados=Count('id', filter=Q(prestado=True)))
        return resultados
        
En este ejemplo, la clase Libro tiene un método llamado numeros_de_libros_prestados que utiliza el método aggregate para realizar una consulta a la base de datos y obtener la cantidad de libros prestados. En la consulta se utiliza el parámetro filter de la función Count para filtrar los libros que están prestados (prestado=True). El resultado se almacena en un diccionario con un campo num_libros_prestados.